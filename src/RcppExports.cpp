// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rInhibition
Rcpp::S4 rInhibition(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_rInhibition(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rInhibition(n, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rInhibition_internal
arma::mat rInhibition_internal(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random);
RcppExport SEXP _pedxing_rInhibition_internal(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    rcpp_result_gen = Rcpp::wrap(rInhibition_internal(n, par, I, x0, maxiter, nonlinear, random));
    return rcpp_result_gen;
END_RCPP
}
// dInhibition
arma::field<arma::vec> dInhibition(arma::vec RT, arma::vec R, unsigned nsim, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_dInhibition(SEXP RTSEXP, SEXP RSEXP, SEXP nsimSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(dInhibition(RT, R, nsim, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rlca
Rcpp::S4 rlca(unsigned int n, arma::vec kappa, arma::vec beta, arma::vec Z, arma::vec t0, arma::vec I, arma::vec x0, double dtovertau, double tau, unsigned int maxiter, bool nonLinear, bool random);
RcppExport SEXP _pedxing_rlca(SEXP nSEXP, SEXP kappaSEXP, SEXP betaSEXP, SEXP ZSEXP, SEXP t0SEXP, SEXP ISEXP, SEXP x0SEXP, SEXP dtovertauSEXP, SEXP tauSEXP, SEXP maxiterSEXP, SEXP nonLinearSEXP, SEXP randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type dtovertau(dtovertauSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonLinear(nonLinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    rcpp_result_gen = Rcpp::wrap(rlca(n, kappa, beta, Z, t0, I, x0, dtovertau, tau, maxiter, nonLinear, random));
    return rcpp_result_gen;
END_RCPP
}
// rLeak
Rcpp::S4 rLeak(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_rLeak(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rLeak(n, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rLeak_internal
arma::mat rLeak_internal(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random);
RcppExport SEXP _pedxing_rLeak_internal(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    rcpp_result_gen = Rcpp::wrap(rLeak_internal(n, par, I, x0, maxiter, nonlinear, random));
    return rcpp_result_gen;
END_RCPP
}
// dLeak
arma::field<arma::vec> dLeak(arma::vec RT, arma::vec R, unsigned nsim, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_dLeak(SEXP RTSEXP, SEXP RSEXP, SEXP nsimSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(dLeak(RT, R, nsim, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rInput
Rcpp::S4 rInput(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_rInput(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rInput(n, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rInput_internal
arma::mat rInput_internal(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random);
RcppExport SEXP _pedxing_rInput_internal(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    rcpp_result_gen = Rcpp::wrap(rInput_internal(n, par, I, x0, maxiter, nonlinear, random));
    return rcpp_result_gen;
END_RCPP
}
// dInput
arma::field<arma::vec> dInput(arma::vec RT, arma::vec R, unsigned nsim, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_dInput(SEXP RTSEXP, SEXP RSEXP, SEXP nsimSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(dInput(RT, R, nsim, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rvB
Rcpp::S4 rvB(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_rvB(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(rvB(n, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}
// rvB_internal
arma::mat rvB_internal(unsigned n, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random);
RcppExport SEXP _pedxing_rvB_internal(SEXP nSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    rcpp_result_gen = Rcpp::wrap(rvB_internal(n, par, I, x0, maxiter, nonlinear, random));
    return rcpp_result_gen;
END_RCPP
}
// dvB
arma::field<arma::vec> dvB(arma::vec RT, arma::vec R, unsigned nsim, arma::vec par, arma::vec I, arma::vec x0, unsigned maxiter, bool nonlinear, bool random, bool debug);
RcppExport SEXP _pedxing_dvB(SEXP RTSEXP, SEXP RSEXP, SEXP nsimSEXP, SEXP parSEXP, SEXP ISEXP, SEXP x0SEXP, SEXP maxiterSEXP, SEXP nonlinearSEXP, SEXP randomSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type RT(RTSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type R(RSEXP);
    Rcpp::traits::input_parameter< unsigned >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type I(ISEXP);
    Rcpp::traits::input_parameter< arma::vec >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< unsigned >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< bool >::type nonlinear(nonlinearSEXP);
    Rcpp::traits::input_parameter< bool >::type random(randomSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(dvB(RT, R, nsim, par, I, x0, maxiter, nonlinear, random, debug));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pedxing_rInhibition", (DL_FUNC) &_pedxing_rInhibition, 8},
    {"_pedxing_rInhibition_internal", (DL_FUNC) &_pedxing_rInhibition_internal, 7},
    {"_pedxing_dInhibition", (DL_FUNC) &_pedxing_dInhibition, 10},
    {"_pedxing_rlca", (DL_FUNC) &_pedxing_rlca, 12},
    {"_pedxing_rLeak", (DL_FUNC) &_pedxing_rLeak, 8},
    {"_pedxing_rLeak_internal", (DL_FUNC) &_pedxing_rLeak_internal, 7},
    {"_pedxing_dLeak", (DL_FUNC) &_pedxing_dLeak, 10},
    {"_pedxing_rInput", (DL_FUNC) &_pedxing_rInput, 8},
    {"_pedxing_rInput_internal", (DL_FUNC) &_pedxing_rInput_internal, 7},
    {"_pedxing_dInput", (DL_FUNC) &_pedxing_dInput, 10},
    {"_pedxing_rvB", (DL_FUNC) &_pedxing_rvB, 8},
    {"_pedxing_rvB_internal", (DL_FUNC) &_pedxing_rvB_internal, 7},
    {"_pedxing_dvB", (DL_FUNC) &_pedxing_dvB, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_pedxing(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
